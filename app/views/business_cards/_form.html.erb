<canvas id="c" width='800' height='400' style="border:2px; border-radius:9%"> <!-- canvas -->
    <div id="buttons">
      <input type="button" id="clear" value="Clear">
    </div>
</canvas>
<br>
<div class="row">
  <div class="col-md-2" style="padding-right:50px">
    <button id="rotateLeft" class="btn btn-info btn-lrg"><span class="glyphicon glyphicon-chevron-left">90°</span></button>
  </div>
  <div class="col-md-4" style="padding-left:160px; padding-right:50px">
    <button id="cropEnable" class="btn btn-info btn-lrg">Enable Crop</button>
    <button id="crop" class="btn btn-info btn-lrg">Crop</button>
   </div>
  <div class="col-md-4" style="padding-left:200px">
    <button id="rotateRight" class="btn btn-info btn-lrg">90°<span class="glyphicon glyphicon-chevron-right"></span></button>
  </div>
</div>
<br>  
  <div class="row">
    <label>Scale: </label>
    <br>
    <div class="col-md-2">
    <input type="range" id="scale-image" value="100" min="0" max="255"></span> <!--scale image -->
    </div>
      <br><br>
    <label>Threshold:  <input type="checkbox" id="threshold"></label>
      <br>
    <div class="col-md-2" style="centered">
      <input type="range" id="threshold-value" value="50" min="0" max="100">
    </div><br><br>
    <label>Grayscale: <input type="checkbox" id="grayscale" ></label>
    <br>
    <label>Sharpen: <input type="checkbox" id="sharpen"></label>
    <br>
    <label>Brighten: <input type="checkbox" id="brightness" ></label>  
    <br>
    <div class="col-md-2" style="centered">
    <input type="range" id="brightness-value" value="100" min="-100" max="255">
    </div>
    <br>
    <br>
    <label>Invert: <input type="checkbox" id="invert" ></label>  
    <br><br><br><br>

</div>

 <script type="text/javascript">

  var imageInput = document.getElementById("business_card_image");
  var imageform = document.getElementById("imageform");
  var dataURL = '';
  var canvas = new fabric.Canvas('c', { backgroundColor: '#f5f5f5' });
  var imageInitialImageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height); 

  var grid = 50;

  // create grid

  for (var i = 0; i < (800 / grid); i++) {
    canvas.add(new fabric.Line([ i * grid, 0, i * grid, 800], { stroke: '#ccc', selectable: false }));
    canvas.add(new fabric.Line([ 0, i * grid, 800, i * grid], { stroke: '#ccc', selectable: false }))
  }


  fabric.Image.filters.Threshold = fabric.util.createClass({
    type: 'threshold',
    threshold: parseInt($('#threshold-value').val(), 10),
    applyTo: function(canvasEl) {
      var ctx = canvasEl.getContext('2d');
      var imageData = ctx.getImageData(0, 0, canvasEl.width, canvasEl.height);

      var filteredImageData = applyThreshold(this.threshold, imageData);

      ctx.putImageData(filteredImageData, 0, 0)
    }
  });

  fabric.Image.filters.Threshold.fromObject = function(object) {
    return new fabric.Image.filters.Threshold(object);
  };

  f = fabric.Image.filters;

  function applyFilter(index, filter) {
    var obj = canvas.getActiveObject();
    obj.filters[index] = filter;
    obj.applyFilters(canvas.renderAll.bind(canvas));
  }

  function applyFilterValue(index, prop, value) {
    var obj = canvas.getActiveObject();
    if (obj.filters[index]) {
      obj.filters[index][prop] = value;
      obj.applyFilters(canvas.renderAll.bind(canvas));
    }
  }

  canvas.on({
    'object:selected': function() {
      fabric.util.toArray(document.getElementsByTagName('input'))
                          .forEach(function(el){ el.disabled = false; })

      var filters = ['grayscale', 'brightness', 'sharpen', 'threshold', 'invert'];
      for (var i = 0; i < filters.length; i++) {
        $(filters[i]).checked = !!canvas.getActiveObject().filters[i];
      }
    },

    'selection:cleared': function() {
      fabric.util.toArray(document.getElementsByTagName('input'))
      .forEach(function(el){ el.disabled = true; })
    }
  });

  var context = document.getElementById('c').getContext('2d'); 
  var imgInstance;
  $('#business_card_image').on('change', function(e)
  {
    var img = new Image()
    img.onload = function(e)
    {
        imgInstance = new fabric.Image(img, {
        left: 300,
        top: 250,
        originX: "center",
        originY: "center",
        scaleX: 1,
        scaleY: 1,
        centeredScaling: true,

      });
    canvas.add(imgInstance);
    imageInitialImageData = canvas.getContext().getImageData(0, 0, canvas.width, canvas.height)
    }

    img.src = URL.createObjectURL(e.target.files[0]);
  })

  function handleRemove() {
    canvas.clear(); //Clear canvas function
  }

  $("#imageSubmit").on("click", function() {
    $("#business_card_imageuri").val(canvas.toDataURL('image/png', 1.0));  
  })

  $("#rotateLeft").on("click", function(e){
    console.log('rotating left')
      var obj = canvas.getActiveObject();
      var angle = obj.getAngle()
      angle += -90;
      obj.set({
        angle: angle 
      })  
    // obj.animate('angle', '-90', { onChange: canvas.renderAll.bind(canvas) });

    canvas.add(obj);
  })

  $("#rotateRight").on("click", function(e){
    console.log('rotating right')
    var obj = canvas.getActiveObject();
    var angle = obj.getAngle()
    angle += 90;
    obj.set({
      angle: angle 
    })
    canvas.add(obj)
  })

/*
 *  CROPPING
 */

  var cropRect = new fabric.Rect({
    fill: 'transparent',
    originX: 'left',
    originY: 'top',
    stroke: '#ccc',
    strokeDashArray: [2, 2],
    opacity: 1,
    width: 100,
    height: 100,
    visible: false
  })

  var canvasPos = document.getElementById('c').getBoundingClientRect(); //left/top position of the canvas
  var mouseX = 0;
  var mouseY = 0;
  var cropping = false;
  var cropEnable = false;
  canvas.add(cropRect);

  var disableImageDragging = function (imgCanvas) {
    imgCanvas.lockRotation = true;
    imgCanvas.lockMovementX = true;
    imgCanvas.lockMovementY = true;
    imgCanvas.lockScalingX = true;
    imgCanvas.lockScalingY = true;
    imgCanvas.lockUniScaling = true;
  }

  var enableImageDragging = function (imgCanvas) {
    imgCanvas.lockRotation = false;
    imgCanvas.lockMovementX = false;
    imgCanvas.lockMovementY = false;
    imgCanvas.lockScalingX = false;
    imgCanvas.lockScalingY = false;
    imgCanvas.lockUniScaling = false;
  }

  var cropOnClickEnableHandler = function() {
    console.log('crop on click')
    if(imgInstance) {
      var left = cropRect.left - imgInstance.left;
      var top = cropRect.top - imgInstance.top;
      var width = cropRect.width;
      var height = cropRect.height;

      imgInstance.clipTo = function(ctx) {
        ctx.rect(left, top, width, height)
      }

      imgInstance.selectable = true;
    }
    cropRect.visible = false;
    cropEnable = false;

    canvas.off("mouse:down", cropOnMouseDownHandler) //give the rectangle the position of the click relative to the canvas
    canvas.off("mouse:move", cropOnMouseMoveHandler)
    canvas.off("mouse:up", cropOnMouseUpHandler)
    enableImageDragging(imgInstance);

    canvas.renderAll();
  }

  var cropOnMouseDownHandler = function(event) {

    cropRect.left = event.e.pageX - canvasPos.left;
    cropRect.top = event.e.pageY - canvasPos.top;
    cropRect.visible = true;
    mouseX = event.e.pageX;
    mouseY = event.e.pageY;
    cropping = true;
    canvas.bringToFront(cropRect);
  }

  var cropOnMouseMoveHandler = function(event) {
    if(cropping) {
      if (event.e.pageX - mouseX > 0) {
          cropRect.width = event.e.pageX - mouseX;
      }

      if (event.e.pageY - mouseY > 0) {
          cropRect.height = event.e.pageY - mouseY;
      }
    }
  }

  var cropOnMouseUpHandler = function(e) {
    cropping = false;
  }

  $("#cropEnable").on("click", function (){
    cropEnable = true;
    console.log("cropEnable:", cropEnable)

    $("#crop").on("click", cropOnClickEnableHandler)
    canvas.on("mouse:down", cropOnMouseDownHandler) //give the rectangle the position of the click relative to the canvas
    canvas.on("mouse:move", cropOnMouseMoveHandler)
    canvas.on("mouse:up", cropOnMouseUpHandler)   
    disableImageDragging(imgInstance);
  })

  $("#slider1").change(function () {                    
    var newValue = $('#slider1').val();
    $("#business_card_imageuri").val(newValue);
  }); 

  document.getElementById('clear').addEventListener('click', function() {
    context.clearRect(0, 0, canvas.width, canvas.height);
  }, false);

  $('#grayscale').on('click', function() {
      applyFilter(0, this.checked && new f.Grayscale()); 
    });


  $('#brightness').on('click', function() {
    applyFilter(1, this.checked && new f.Brightness({ 
      brightness: parseInt($('#brightness-value').val(), 10) 
      }))
  });

  $('#brightness-value').on('input', function() {
    applyFilterValue(1, 'brightness', parseInt($(this).val(), 10)) 
  });

  $('#sharpen').on('click', function() {
    applyFilter(2, this.checked && new f.Convolute({
      matrix: [  0, -1,  0,
                -1,  5, -1,
                 0, -1,  0 ]
    }));
  });

  $('#threshold').on('click', function() {

    applyFilter(3, this.checked && new f.Threshold({ 
        threshold: parseInt($('#threshold-value').val(), 10) 
      }))
    });

  $('#threshold-value').on('input', function() {
    applyFilterValue(3, 'threshold', parseInt($(this).val(), 10));
  });



  $('#scale-image').on('input', function() {
    var obj = canvas.getActiveObject();
    var val = $(this).val();
    obj.setScaleX(val/100);
    obj.setScaleY(val/100);
    canvas.add(obj)
  })

  $('#invert').on('click', function() {
  applyFilter(4, this.checked && new f.Invert());
});

  function applyThreshold(val, imageData) {
    var pixelsData = imageData.data;

    for(var i = 0; i < imageData.data.length - 1; i += 4) {
      var color = pixelsData[i] + pixelsData[i+1] + pixelsData[i+2] 
      if ( i === 0) {
        console.log('threshold is:', 765 * (val/100))
        console.log('initial pixel combined value is:', color)
      }

      if(color > 765 * (val/100)) {
        pixelsData[i] = 255
        pixelsData[i+1] = 255   //white
        pixelsData[i+2] = 255
      } else {
        pixelsData[i] = 0
        pixelsData[i+1] = 0   //black
        pixelsData[i+2] = 0   
      }

      if(i === 0) {
        console.log('new combined value is:', pixelsData[i] + pixelsData[i+1] + pixelsData[i+2])
      }
    }
    return imageData;
  }

  canvas.on('object:moving', function(options) { 
    options.target.set({
      left: Math.round(options.target.left / grid) * grid, //snap to grid function
      top: Math.round(options.target.top / grid) * grid
    });
  });

</script>

  </div> 
</div>

